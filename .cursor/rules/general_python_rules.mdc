---
description:
globs:
alwaysApply: false
---
- Write concise, modular, and maintainable Python code.
- Prioritize clarity, efficiency, and robustness in data pipelines.
- Employ object-oriented programming for structuring service logic and functional programming for data transformations.
- Ensure proper error handling and logging throughout the pipeline stages.
- Implement GPU utilization effectively for relevant ML model inference.
- Use descriptive variable names reflecting their role in the pipeline.
- Follow PEP 8 style guidelines for Python code.
- Define clear problem scope and data flow for each processing pipeline.
- Maintain a modular code structure with distinct responsibilities for different modules (e.g., downloading, VAD, transcription, classification, DB interaction).
- Rely on external configuration files (JSON) for adaptable parameters.
- Implement robust logging throughout all pipeline stages for traceability and debugging.
- Use version control (e.g., git) meticulously.
- Write unit and integration tests for key components of the pipeline.
- Refer to the official documentation for the specific versions of libraries used in the project.
